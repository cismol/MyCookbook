<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Recipe Book</title>
    <link rel="stylesheet" type="text/css" href="style/style.css">
</head>
<body>
<header>
    <h1>My Cookbook</h1>
    <div class="search-bar">
        <input type="text" id="searchInput" class="search-input" placeholder="Search recipes...">
        <button id="searchButton">Search</button>
    </div>
    <nav>
        <a href="#">Home</a>
        <a href="#">Recipes</a>
        <a href="#">About</a>
        <a href="#">Contact</a>
    </nav>
</header>

<div id="recipeList"></div>

<div class="upload-form">
    <h2>Neues Rezept hinzufügen</h2>
    <input type="text" id="newRecipeTitle" placeholder="Title">
    <textarea id="newRecipeDescription" placeholder="Description"></textarea>
    <input type="file" id="newRecipeImage" accept="image/*">
    <div id="ingredientsList">
        <h3>Ingredients</h3>
        <div class="ingredient" id="ingredientTemplate" style="display: none;">
            <input type="text" placeholder="Menge" class="ingredient-quantity">
            <input type="text" placeholder="Zutat" class="ingredient-name">
            <button type="button" class="removeIngredient">Remove</button>
        </div>
    </div>
    <button type="button" id="addIngredientButton">Add Ingredient</button>
    <button id="uploadRecipeButton">Upload Recipe</button>
</div>

<div class="edit-form" id="editForm" style="display: none;">
    <h2>Edit Recipe</h2>
    <input type="hidden" id="editRecipeId">
    <input type="text" id="editRecipeTitle" placeholder="Title">
    <textarea id="editRecipeDescription" placeholder="Description"></textarea>
    <div id="editIngredientsList">
        <h3>Ingredients</h3>
    </div>
    <button type="button" id="addEditIngredientButton">Add Ingredient</button>
    <button type="button" id="updateRecipeButton">Update Recipe</button>
</div>

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-app.js";
    import { getFirestore, collection, getDocs, addDoc, doc, getDoc, updateDoc, deleteDoc } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js";
    import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.8.0/firebase-storage.js";
    
    
    const firebaseConfig = {
        apiKey: "AIzaSyDxvabrO3eNRTm37fE7G7sxckZBJrrnpHQ",
        authDomain: "mycookbook-ee7d2.firebaseapp.com",
        projectId: "mycookbook-ee7d2",
        storageBucket: "mycookbook-ee7d2.appspot.com",
        messagingSenderId: "49507480622",
        appId: "1:49507480622:web:679369b3d9568dc15adbbf",
        measurementId: "G-1MXN7NP98K"
    };


    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const storage = getStorage(app);

    document.getElementById('uploadRecipeButton').addEventListener('click', addRecipe);
    document.getElementById('searchButton').addEventListener('click', () => fetchRecipes(document.getElementById('searchInput').value.trim()));

async function fetchRecipes(searchTerm = "") {
    const recipesCollectionRef = collection(db, 'recipes');
    const snapshot = await getDocs(recipesCollectionRef);
    const recipesContainer = document.getElementById('recipeList');
    recipesContainer.innerHTML = '';
    
    snapshot.forEach(doc => {
        const recipe = doc.data();
        if (!searchTerm || recipe.title.toLowerCase().includes(searchTerm.toLowerCase())) {
            const recipeElement = document.createElement('div');
            recipeElement.classList.add('recipe');
			
                			
            let ingredientsHtml = '<ul>';
            if (recipe.ingredients) {
                recipe.ingredients.forEach(ingredient => {
                    ingredientsHtml += `<li>${ingredient.menge} - ${ingredient.zutat}</li>`;
                });
            }
            ingredientsHtml += '</ul>';
            recipeElement.innerHTML = `
                <h2>${recipe.title}</h2>
                <img src="${recipe.imageUrl || ''}" alt="Recipe image" style="max-width: 100%; height: auto;">
				<h3>Benötigte Zutaten</h3>
                ${ingredientsHtml}
				<h3>Beschreibung</h3>
                <p>${recipe.description}</p>
				<!-- TODO: Correctly implement edit -->
               <!-- <button class="editButton" data-id="${doc.id}">Edit</button> --> 
            `;
			
				const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete';
                deleteButton.onclick = () => deleteRecipe(doc.id);
                recipeElement.appendChild(deleteButton);

				recipesContainer.appendChild(recipeElement);
        }
    });

    document.querySelectorAll('.editButton').forEach(button => {
        button.addEventListener('click', function() {
            showEditForm(this.getAttribute('data-id'));
        });
    });
}

  async function deleteRecipe(docId) {
        if (confirm('Are you sure you want to delete this recipe?')) {
            await deleteDoc(doc(db, "recipes", docId));
            alert('Recipe deleted successfully.');
            fetchRecipes(); // Refresh the list after deletion
        }
    }

    async function showEditForm(docId) {
        const docRef = doc(db, "recipes", docId);
        const docSnap = await getDoc(docRef);

        if (docSnap.exists()) {
            const recipeData = docSnap.data();
            document.getElementById('editRecipeTitle').value = recipeData.title;
            document.getElementById('editRecipeDescription').value = recipeData.description;
            
            // Clear existing ingredient inputs except the template
            document.querySelectorAll('.ingredient:not(#ingredientTemplate)').forEach(el => el.remove());

            // Populate the form with existing ingredients
            recipeData.ingredients.forEach((ingredient, index) => {
                addIngredientField(ingredient); // Pass ingredient data to populate fields
            });

            // Show the form
            const editForm = document.getElementById('editForm');
            editForm.style.display = 'block';
            document.getElementById('saveEditButton').setAttribute('data-id', docId);

            // Ensure at least one ingredient field is available
            if (recipeData.ingredients.length === 0) {
                addIngredientField(); // Add an empty ingredient field if none exist
            }
        } else {
            console.log("No such document!");
        }
    }


	
	document.getElementById('addIngredientButton').addEventListener('click', addIngredientField);
document.addEventListener('click', function(e) {
    if (e.target && e.target.classList.contains('removeIngredient') && ingredientsNodes.length > 0) {
        e.target.parentNode.remove();
        }
});

document.addEventListener('DOMContentLoaded', () => {
    // Initialize the first ingredient field on page load
    addIngredientField();
    document.getElementById('addIngredientButton').addEventListener('click', addIngredientField);
    document.getElementById('uploadRecipeButton').addEventListener('click', addRecipe);
    // Additional initialization code as needed
});

function addIngredientField() {
    const ingredientsList = document.getElementById('ingredientsList');
    const newIngredient = document.getElementById('ingredientTemplate').cloneNode(true);
    newIngredient.style.display = 'flex'; // Make it visible
    // Ensure the cloned node is not the template anymore
    newIngredient.classList.remove('ingredient-template');
    newIngredient.id = '';
    ingredientsList.appendChild(newIngredient);
}

async function addRecipe() {
    const title = document.getElementById('newRecipeTitle').value.trim();
    const description = document.getElementById('newRecipeDescription').value.trim();
    const imageFile = document.getElementById('newRecipeImage').files[0]; // Get the file from the input
    const ingredientsNodes = document.querySelectorAll('.ingredient:not(#ingredientTemplate)');
    const ingredients = Array.from(ingredientsNodes).map(node => ({
        menge: node.querySelector('.ingredient-quantity').value,
        zutat: node.querySelector('.ingredient-name').value
    })).filter(ingredient => ingredient.menge && ingredient.zutat);

    if (title && description && ingredients.length > 0 && imageFile) {
        try {
            // Upload the image to Firebase Storage
            const imageRef = ref(storage, `recipeImages/${imageFile.name}_${Date.now()}`);
            const uploadResult = await uploadBytes(imageRef, imageFile);
            const imageUrl = await getDownloadURL(uploadResult.ref);

            // Store the recipe data along with the image URL in Firestore
            await addDoc(collection(db, "recipes"), {
                title,
                description,
                ingredients,
                imageUrl // Store the image URL instead of the local file path
            });

            alert('Recipe added successfully!');
            document.getElementById('newRecipeTitle').value = '';
            document.getElementById('newRecipeDescription').value = '';
            document.getElementById('newRecipeImage').value = ''; // Clear the file input
            resetIngredientsList();
        } catch (error) {
            console.error("Error adding recipe: ", error);
            alert('Failed to add recipe.');
        }
    } else {
        alert('Title, description, an image, and at least one ingredient are required.');
    }
    // Optionally reload the page or fetch recipes again to show the new addition
    fetchRecipes();
}


function resetIngredientsList() {
    // Clear existing ingredients
    document.querySelectorAll('.ingredient:not(#ingredientTemplate)').forEach(el => el.remove());
    // Add a new ingredient field for the next recipe
    addIngredientField();
}

document.addEventListener('click', function(e) {
    if (e.target && e.target.classList.contains('removeIngredient')) {
        // Get all the ingredient nodes excluding the template
        const ingredientsNodes = document.querySelectorAll('.ingredient:not(#ingredientTemplate)');
        
        // Only allow removal if there are more than one ingredient elements
        if (ingredientsNodes.length > 0) {
            e.target.parentNode.remove();
        } else {
            alert('You must have at least one ingredient.');
			addIngredientField();
        }
    }
});





    fetchRecipes();
</script>

</body>
</html>
